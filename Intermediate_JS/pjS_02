This Keyword
In JavaScript, the this keyword provides a function with context.

A function may act different depending on what this is:

function logout() {
    if(this.isLoggedIn) {
        this.removeAuthToken();
        this.redirectToSignIn();
    }
}
As we'll learn in the Prototype Chain lesson, JavaScript has a powerful tool for creating new objects and linking them to a common function. These functions can be written once and applied to whatever this is.

// an example of a "constructor" function
// we'll explore this in further detail
function Person() {
    this.name = "Steve";
    this.age = 32;
}
In JavaScript, you can always access the keyword this. It is a way of defining the context of a function.

In global scope (not inside of a function), this refers to the module itself within Node.js or the window within the browser.

When it comes to functions, this can be set in a few different ways. Let's focus first on how we can explicitly set it.

function sum() {
    return this.a + this.b;
}
If we were to run sum() directly, this would be set from the global scope and likely neither a nor b would be defined.

We could instead, call the function with a specific context:

const result = sum.call({ a: 2, b: 4 });

console.log(result); // 6 
The method call is available on all JavaScript functions. The first argument we pass to call becomes this inside the function.

